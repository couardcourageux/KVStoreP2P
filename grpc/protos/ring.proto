syntax = "proto3";

package Ring;

////////////////////////Services
service Node2Node {

    rpc obtainId(IDReqMsg) returns (IDReqRespMsg) {}
    rpc findAddr(IdRingMsg) returns (NodeDescMsg) {}
    
}

service AgentCluster {
    rpc joinReq(AgentDescMsg) returns (JoinClusterResp) {}
    rpc updateRole(UpdateRole) returns (UpdateRole) {}
    rpc udpdateNode(NodeDescMsg) returns (voidMsg) {}
}

service ClusterCronJob {
    rpc callPing(voidMsg) returns (voidMsg) {}
    rpc callCheckPings(voidMsg) returns (voidMsg) {}
    rpc callStabilityCluster(voidMsg) returns (voidMsg) {}

}

service NetworkCronJob {
    rpc callInitAgent(Stringified) returns (voidMsg) {}
}

//////////////////General
message IpPortMsg {
    string agentId = 1;
    string ip = 2;
    string port = 3;
}

message ResponseMsg {
    int64 errorCode = 1;
    bool respStatus = 2;
}

message voidMsg {}
//////////////////obtainId
message IDReqMsg {
    string token = 1;
}
message IDReqRespMsg {
    int64 errorCode = 1;
    string agentId = 2;
    string nodeId = 3;
}
//////////////////

//////////////////findAddr
message IdRingMsg {
    string ringId = 1;
}

message NodeAddrMsg {
    int64 errorCode = 1;
    string NodeId = 2;
    IpPortMsg master = 3;
    IpPortMsg backup = 4;
}
//////////////////

message Stringified {
    string theString = 1;
}

//////////////////joinReq
message AgentDescMsg {
    string agentDict = 1;
}

message NodeDescMsg {
    string NodeDict = 1;
}

message JoinClusterResp {
    bool accepted = 1;
    string NodeDict = 2;
}

message UpdateRole {
    int64 newRole = 1;
}

/////////////////